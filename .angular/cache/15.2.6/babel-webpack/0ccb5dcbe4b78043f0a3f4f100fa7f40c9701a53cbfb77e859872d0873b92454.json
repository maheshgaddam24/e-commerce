{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./product.service\";\nimport * as i2 from \"./order.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"ngx-toastr\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(productService, orderService, httpClient, router, spinner, toast) {\n      this.productService = productService;\n      this.orderService = orderService;\n      this.httpClient = httpClient;\n      this.router = router;\n      this.spinner = spinner;\n      this.toast = toast;\n      this.ServerURL = environment.serverURL;\n      this.cartDataClient = {\n        prodData: [{\n          incart: 0,\n          id: 0\n        }],\n        total: 0\n      };\n      this.cartDataServer = {\n        data: [{\n          product: undefined,\n          numInCart: 0\n        }],\n        total: 0\n      };\n      this.cartTotal$ = new BehaviorSubject(0);\n      this.cartDataObs$ = new BehaviorSubject(this.cartDataServer);\n      this.cartTotal$.next(this.cartDataServer.total);\n      this.cartDataObs$.next(this.cartDataServer);\n      let info = JSON.parse(localStorage.getItem('cart'));\n      if (info !== null && info !== undefined && info.prodData[0].incart !== 0) {\n        this.cartDataClient = info;\n        this.cartDataClient.prodData.forEach(p => {\n          this.productService.getSingleProduct(p.id).subscribe(actualProdInfo => {\n            if (this.cartDataServer.data[0].numInCart === 0) {\n              this.cartDataServer.data[0].numInCart = p.incart;\n              this.cartDataServer.data[0].product = actualProdInfo;\n              this.CalculateTotal();\n              this.cartDataClient.total = this.cartDataServer.total;\n              localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n            } else {\n              this.cartDataServer.data.push({\n                numInCart: p.incart,\n                product: actualProdInfo\n              });\n              this.CalculateTotal();\n              this.cartDataClient.total = this.cartDataServer.total;\n              localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n            }\n            this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n          });\n        });\n      }\n    }\n    CalculateSubTotal(index) {\n      let subTotal = 0;\n      let p = this.cartDataServer.data[index];\n      // @ts-ignore \n      subTotal = p.product.price * p.numInCart;\n      return subTotal;\n    }\n    AddProductToCart(id, quantity) {\n      this.productService.getSingleProduct(id).subscribe(prod => {\n        if (this.cartDataServer.data[0].product === undefined) {\n          this.cartDataServer.data[0].product = prod;\n          this.cartDataServer.data[0].numInCart = quantity !== undefined ? quantity : 1;\n          this.CalculateTotal();\n          this.cartDataClient.prodData[0].incart = this.cartDataServer.data[0].numInCart;\n          this.cartDataClient.prodData[0].id = prod.id;\n          this.cartDataClient.total = this.cartDataServer.total;\n          localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n          this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n          this.toast.success(`${prod.name} added to the cart.`, \"Product Added\", {\n            timeOut: 1500,\n            progressBar: true,\n            progressAnimation: 'increasing',\n            positionClass: 'toast-top-right'\n          });\n        } else {\n          let index = this.cartDataServer.data.findIndex(p => p.product.id === prod.id);\n          // 1. If chosen product is already in cart array\n          if (index !== -1) {\n            if (quantity !== undefined && quantity <= prod.quantity) {\n              // @ts-ignore\n              this.cartDataServer.data[index].numInCart = this.cartDataServer.data[index].numInCart < prod.quantity ? quantity : prod.quantity;\n            } else {\n              // @ts-ignore\n              this.cartDataServer.data[index].numInCart < prod.quantity ? this.cartDataServer.data[index].numInCart++ : prod.quantity;\n            }\n            this.cartDataClient.prodData[index].incart = this.cartDataServer.data[index].numInCart;\n            this.toast.info(`${prod.name} quantity updated in the cart.`, \"Product Updated\", {\n              timeOut: 1500,\n              progressBar: true,\n              progressAnimation: 'increasing',\n              positionClass: 'toast-top-right'\n            });\n          }\n          // 2. If chosen product is not in cart array\n          else {\n            this.cartDataServer.data.push({\n              product: prod,\n              numInCart: 1\n            });\n            this.cartDataClient.prodData.push({\n              incart: 1,\n              id: prod.id\n            });\n            this.toast.success(`${prod.name} added to the cart.`, \"Product Added\", {\n              timeOut: 1500,\n              progressBar: true,\n              progressAnimation: 'increasing',\n              positionClass: 'toast-top-right'\n            });\n          }\n          this.CalculateTotal();\n          this.cartDataClient.total = this.cartDataServer.total;\n          localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n          this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n        } // END of ELSE\n      });\n    }\n\n    UpdateCartData(index, increase) {\n      let data = this.cartDataServer.data[index];\n      if (increase) {\n        // @ts-ignore\n        data.numInCart < data.product.quantity ? data.numInCart++ : data.product.quantity;\n        this.cartDataClient.prodData[index].incart = data.numInCart;\n        this.CalculateTotal();\n        this.cartDataClient.total = this.cartDataServer.total;\n        this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n        localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n      } else {\n        // @ts-ignore\n        data.numInCart--;\n        // @ts-ignore\n        if (data.numInCart < 1) {\n          this.DeleteProductFromCart(index);\n          this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n        } else {\n          // @ts-ignore\n          this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n          this.cartDataClient.prodData[index].incart = data.numInCart;\n          this.CalculateTotal();\n          this.cartDataClient.total = this.cartDataServer.total;\n          localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n        }\n      }\n    }\n    DeleteProductFromCart(index) {\n      /*    console.log(this.cartDataClient.prodData[index].prodId);\r\n          console.log(this.cartDataServer.data[index].product.id);*/\n      if (window.confirm('Are you sure you want to delete the item?')) {\n        this.cartDataServer.data.splice(index, 1);\n        this.cartDataClient.prodData.splice(index, 1);\n        this.CalculateTotal();\n        this.cartDataClient.total = this.cartDataServer.total;\n        if (this.cartDataClient.total === 0) {\n          this.cartDataClient = {\n            prodData: [{\n              incart: 0,\n              id: 0\n            }],\n            total: 0\n          };\n          localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n        } else {\n          localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n        }\n        if (this.cartDataServer.total === 0) {\n          this.cartDataServer = {\n            data: [{\n              product: undefined,\n              numInCart: 0\n            }],\n            total: 0\n          };\n          this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n        } else {\n          this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n        }\n      }\n      // If the user doesn't want to delete the product, hits the CANCEL button\n      else {\n        return;\n      }\n    }\n    CheckoutFromCart(userId) {\n      this.httpClient.post(`${this.ServerURL}orders/payment`, null).subscribe(res => {\n        console.clear();\n        if (res.success) {\n          this.resetServerData();\n          this.httpClient.post(`${this.ServerURL}orders/new`, {\n            userId: userId,\n            products: this.cartDataClient.prodData\n          }).subscribe(data => {\n            this.orderService.getSingleOrder(data.order_id).then(prods => {\n              if (data.success) {\n                const navigationExtras = {\n                  state: {\n                    message: data.message,\n                    products: prods,\n                    orderId: data.order_id,\n                    total: this.cartDataClient.total\n                  }\n                };\n                this.spinner.hide().then();\n                this.router.navigate(['/thankyou'], navigationExtras).then(p => {\n                  this.cartDataClient = {\n                    prodData: [{\n                      incart: 0,\n                      id: 0\n                    }],\n                    total: 0\n                  };\n                  this.cartTotal$.next(0);\n                  localStorage.setItem('cart', JSON.stringify(this.cartDataClient));\n                });\n              }\n            });\n          });\n        } else {\n          this.spinner.hide().then();\n          this.router.navigateByUrl('/checkout').then();\n          this.toast.error(`Sorry, failed to book the order`, \"Order Status\", {\n            timeOut: 1500,\n            progressBar: true,\n            progressAnimation: 'increasing',\n            positionClass: 'toast-top-right'\n          });\n        }\n      });\n    }\n    CalculateTotal() {\n      let Total = 0;\n      this.cartDataServer.data.forEach(p => {\n        const {\n          numInCart\n        } = p;\n        const {\n          price\n        } = p.product;\n        // @ts-ignore\n        Total += numInCart * price;\n      });\n      this.cartDataServer.total = Total;\n      this.cartTotal$.next(this.cartDataServer.total);\n    }\n    resetServerData() {\n      this.cartDataServer = {\n        data: [{\n          product: undefined,\n          numInCart: 0\n        }],\n        total: 0\n      };\n      this.cartDataObs$.next(Object.assign({}, this.cartDataServer));\n    }\n  }\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i2.OrderService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.NgxSpinnerService), i0.ɵɵinject(i6.ToastrService));\n  };\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}